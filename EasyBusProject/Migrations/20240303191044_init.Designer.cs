// <auto-generated />
using System;
using EasyBus.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EasyBusProject.Migrations
{
    [DbContext(typeof(MainDbContext))]
    [Migration("20240303191044_init")]
    partial class init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EasyBus.Models.Bus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Category")
                        .HasColumnType("int");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Seats")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Bus");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Category = 0,
                            Model = "Mercedes",
                            Seats = 14
                        },
                        new
                        {
                            Id = 2,
                            Category = 2,
                            Model = "Higer",
                            Seats = 32
                        },
                        new
                        {
                            Id = 3,
                            Category = 1,
                            Model = "BYD",
                            Seats = 52
                        },
                        new
                        {
                            Id = 4,
                            Category = 0,
                            Model = "MCV",
                            Seats = 14
                        },
                        new
                        {
                            Id = 5,
                            Category = 2,
                            Model = "Solaris",
                            Seats = 32
                        },
                        new
                        {
                            Id = 6,
                            Category = 1,
                            Model = "MCV",
                            Seats = 52
                        },
                        new
                        {
                            Id = 7,
                            Category = 0,
                            Model = "Toyota",
                            Seats = 14
                        },
                        new
                        {
                            Id = 8,
                            Category = 2,
                            Model = "MCV",
                            Seats = 32
                        },
                        new
                        {
                            Id = 9,
                            Category = 1,
                            Model = "Scania",
                            Seats = 52
                        },
                        new
                        {
                            Id = 10,
                            Category = 0,
                            Model = "Volvo",
                            Seats = 14
                        },
                        new
                        {
                            Id = 11,
                            Category = 2,
                            Model = "MCV",
                            Seats = 32
                        });
                });

            modelBuilder.Entity("EasyBus.Models.Schedule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AvailableSeatsInTrip")
                        .HasColumnType("int");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<string>("NumOfSeatsReserved")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TripId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TripId");

                    b.ToTable("Schedule");
                });

            modelBuilder.Entity("EasyBus.Models.Station", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<double?>("Latitude")
                        .HasColumnType("float");

                    b.Property<double?>("Longitude")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Station");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            City = "Alexandria",
                            Latitude = 30.0444,
                            Longitude = 31.235700000000001,
                            Name = "Alexandria"
                        },
                        new
                        {
                            Id = 2,
                            City = "Beheira",
                            Latitude = 30.474399999999999,
                            Longitude = 31.035699999999999,
                            Name = "Beheira"
                        },
                        new
                        {
                            Id = 3,
                            City = "Bani Suef",
                            Latitude = 29.066127000000002,
                            Longitude = 31.099385000000002,
                            Name = "Bani Suef"
                        },
                        new
                        {
                            Id = 4,
                            City = "Cairo",
                            Latitude = 31.244399999999999,
                            Longitude = 30.035699999999999,
                            Name = "Cairo"
                        },
                        new
                        {
                            Id = 5,
                            City = "Damietta",
                            Latitude = 31.814443000000001,
                            Longitude = 31.417539000000001,
                            Name = "Damietta"
                        },
                        new
                        {
                            Id = 6,
                            City = "Fayoum",
                            Latitude = 30.842849999999999,
                            Longitude = 29.308402000000001,
                            Name = "Fayoum"
                        },
                        new
                        {
                            Id = 7,
                            City = "Giza",
                            Latitude = 31.144400000000001,
                            Longitude = 30.035699999999999,
                            Name = "Giza"
                        },
                        new
                        {
                            Id = 8,
                            City = "Monofiya",
                            Latitude = 30.465928000000002,
                            Longitude = 30.930579999999999,
                            Name = "Monofiya"
                        },
                        new
                        {
                            Id = 9,
                            City = "Port Said",
                            Latitude = 32.314442999999997,
                            Longitude = 31.217538999999999,
                            Name = "Port Said"
                        },
                        new
                        {
                            Id = 10,
                            City = "Tanta",
                            Latitude = 30.777818,
                            Longitude = 30.991126000000001,
                            Name = "Tanta"
                        });
                });

            modelBuilder.Entity("EasyBus.Models.Trip", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AvailableDays")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("BusId")
                        .HasColumnType("int");

                    b.Property<int?>("DropOffID")
                        .HasColumnType("int");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("PickUpID")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("Money");

                    b.Property<TimeOnly>("Time")
                        .HasColumnType("time");

                    b.HasKey("Id");

                    b.HasIndex("BusId");

                    b.HasIndex("DropOffID");

                    b.HasIndex("PickUpID");

                    b.ToTable("Trip");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AvailableDays = "[0,1,2,3,4,5,6]",
                            BusId = 1,
                            DropOffID = 2,
                            Duration = 1,
                            Name = "A",
                            PickUpID = 1,
                            Price = 200m,
                            Time = new TimeOnly(2, 0, 0)
                        },
                        new
                        {
                            Id = 2,
                            AvailableDays = "[0,1]",
                            BusId = 1,
                            DropOffID = 3,
                            Duration = 2,
                            Name = "B",
                            PickUpID = 2,
                            Price = 300m,
                            Time = new TimeOnly(2, 0, 0)
                        },
                        new
                        {
                            Id = 3,
                            AvailableDays = "[0,1]",
                            BusId = 1,
                            DropOffID = 4,
                            Duration = 1,
                            Name = "C",
                            PickUpID = 3,
                            Price = 400m,
                            Time = new TimeOnly(2, 0, 0)
                        },
                        new
                        {
                            Id = 4,
                            AvailableDays = "[0,1]",
                            BusId = 1,
                            DropOffID = 5,
                            Duration = 2,
                            Name = "D",
                            PickUpID = 4,
                            Price = 500m,
                            Time = new TimeOnly(2, 0, 0)
                        },
                        new
                        {
                            Id = 5,
                            AvailableDays = "[0,1]",
                            BusId = 1,
                            DropOffID = 6,
                            Duration = 1,
                            Name = "E",
                            PickUpID = 5,
                            Price = 100m,
                            Time = new TimeOnly(2, 0, 0)
                        },
                        new
                        {
                            Id = 6,
                            AvailableDays = "[0,1]",
                            BusId = 1,
                            DropOffID = 7,
                            Duration = 2,
                            Name = "F",
                            PickUpID = 6,
                            Price = 200m,
                            Time = new TimeOnly(2, 0, 0)
                        },
                        new
                        {
                            Id = 7,
                            AvailableDays = "[0,1]",
                            BusId = 1,
                            DropOffID = 8,
                            Duration = 1,
                            Name = "G",
                            PickUpID = 7,
                            Price = 300m,
                            Time = new TimeOnly(2, 0, 0)
                        },
                        new
                        {
                            Id = 8,
                            AvailableDays = "[0,1]",
                            BusId = 1,
                            DropOffID = 9,
                            Duration = 2,
                            Name = "H",
                            PickUpID = 8,
                            Price = 400m,
                            Time = new TimeOnly(2, 0, 0)
                        },
                        new
                        {
                            Id = 9,
                            AvailableDays = "[0,1]",
                            BusId = 1,
                            DropOffID = 10,
                            Duration = 1,
                            Name = "I",
                            PickUpID = 9,
                            Price = 500m,
                            Time = new TimeOnly(2, 0, 0)
                        },
                        new
                        {
                            Id = 10,
                            AvailableDays = "[0,1]",
                            BusId = 1,
                            DropOffID = 9,
                            Duration = 2,
                            Name = "J",
                            PickUpID = 10,
                            Price = 600m,
                            Time = new TimeOnly(2, 0, 0)
                        });
                });

            modelBuilder.Entity("EasyBus.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ClientName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("EasyBus.Models.UserSchedule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("NumOfSeats")
                        .HasColumnType("int");

                    b.Property<int>("ScheduleId")
                        .HasColumnType("int");

                    b.Property<string>("SeatsTaken")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ScheduleId");

                    b.HasIndex("UserId");

                    b.ToTable("UserSchedules");
                });

            modelBuilder.Entity("EasyBusProject.Models.ContactUs", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ContactUs");
                });

            modelBuilder.Entity("EasyBusProject.Models.Ticket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("BusName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<string>("Destination")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumOfAvailSeats")
                        .HasColumnType("int");

                    b.Property<int>("NumOfSeatsOfUser")
                        .HasColumnType("int");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<string>("Seats")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StartFrom")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<TimeOnly>("Time")
                        .HasColumnType("time");

                    b.Property<int>("TotalCapacity")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Tickets");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("EasyBus.Models.Schedule", b =>
                {
                    b.HasOne("EasyBus.Models.Trip", "Trip")
                        .WithMany()
                        .HasForeignKey("TripId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Trip");
                });

            modelBuilder.Entity("EasyBus.Models.Trip", b =>
                {
                    b.HasOne("EasyBus.Models.Bus", "Bus")
                        .WithMany("Trips")
                        .HasForeignKey("BusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EasyBus.Models.Station", "DropOff")
                        .WithMany("TripsAsDropOff")
                        .HasForeignKey("DropOffID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("EasyBus.Models.Station", "PickUp")
                        .WithMany("TripsAsPickUp")
                        .HasForeignKey("PickUpID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Bus");

                    b.Navigation("DropOff");

                    b.Navigation("PickUp");
                });

            modelBuilder.Entity("EasyBus.Models.UserSchedule", b =>
                {
                    b.HasOne("EasyBus.Models.Schedule", "Schedule")
                        .WithMany("UserSchedules")
                        .HasForeignKey("ScheduleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EasyBus.Models.User", "User")
                        .WithMany("UserSchedules")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Schedule");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EasyBusProject.Models.Ticket", b =>
                {
                    b.HasOne("EasyBus.Models.User", "User")
                        .WithMany("Tickets")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("EasyBus.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("EasyBus.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EasyBus.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("EasyBus.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EasyBus.Models.Bus", b =>
                {
                    b.Navigation("Trips");
                });

            modelBuilder.Entity("EasyBus.Models.Schedule", b =>
                {
                    b.Navigation("UserSchedules");
                });

            modelBuilder.Entity("EasyBus.Models.Station", b =>
                {
                    b.Navigation("TripsAsDropOff");

                    b.Navigation("TripsAsPickUp");
                });

            modelBuilder.Entity("EasyBus.Models.User", b =>
                {
                    b.Navigation("Tickets");

                    b.Navigation("UserSchedules");
                });
#pragma warning restore 612, 618
        }
    }
}
